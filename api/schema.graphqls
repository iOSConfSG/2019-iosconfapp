schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
input type for inserting data into table "feedback"
"""
input feedback_insert_input {
  comment: String
  feeling: String
  talk_id: Int
}

"""
response of any mutation on the table "feedback"
"""
type feedback_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
}

"""mutation root"""
type mutation_root {
  """
  insert data into the table: "feedback"
  """
  insert_feedback(
    """the rows to be inserted"""
    objects: [feedback_insert_input!]!
  ): feedback_mutation_response
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "schedule"
  """
  schedule(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): [schedule!]!

  """
  fetch data from the table: "talk_speakers_view"
  """
  talk_speakers_view(
    """distinct select on columns"""
    distinct_on: [talk_speakers_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [talk_speakers_view_order_by!]

    """filter the rows returned"""
    where: talk_speakers_view_bool_exp
  ): [talk_speakers_view!]!
}

"""
columns and relationships of "schedule"
"""
type schedule {
  activity: String
  end_at: timestamptz
  id: Int

  """An array relationship"""
  speakers(
    """distinct select on columns"""
    distinct_on: [talk_speakers_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [talk_speakers_view_order_by!]

    """filter the rows returned"""
    where: talk_speakers_view_bool_exp
  ): [talk_speakers_view!]!
  start_at: timestamptz
  talk_description: String
  talk_type: String
  title: String
}

"""
Boolean expression to filter rows from the table "schedule". All fields are combined with a logical 'AND'.
"""
input schedule_bool_exp {
  _and: [schedule_bool_exp!]
  _not: schedule_bool_exp
  _or: [schedule_bool_exp!]
  activity: String_comparison_exp
  end_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  speakers: talk_speakers_view_bool_exp
  start_at: timestamptz_comparison_exp
  talk_description: String_comparison_exp
  talk_type: String_comparison_exp
  title: String_comparison_exp
}

"""Ordering options when selecting data from "schedule"."""
input schedule_order_by {
  activity: order_by
  end_at: order_by
  id: order_by
  speakers_aggregate: talk_speakers_view_aggregate_order_by
  start_at: order_by
  talk_description: order_by
  talk_type: order_by
  title: order_by
}

"""
select columns of table "schedule"
"""
enum schedule_select_column {
  """column name"""
  activity

  """column name"""
  end_at

  """column name"""
  id

  """column name"""
  start_at

  """column name"""
  talk_description

  """column name"""
  talk_type

  """column name"""
  title
}

type subscription_root {
  """
  fetch data from the table: "schedule"
  """
  schedule(
    """distinct select on columns"""
    distinct_on: [schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [schedule_order_by!]

    """filter the rows returned"""
    where: schedule_bool_exp
  ): [schedule!]!

  """
  fetch data from the table: "talk_speakers_view"
  """
  talk_speakers_view(
    """distinct select on columns"""
    distinct_on: [talk_speakers_view_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [talk_speakers_view_order_by!]

    """filter the rows returned"""
    where: talk_speakers_view_bool_exp
  ): [talk_speakers_view!]!
}

"""
columns and relationships of "talk_speakers_view"
"""
type talk_speakers_view {
  company: String
  id: Int
  image_url: String
  linkedin: String
  name: String
  short_bio: String
  talk_id: Int
  twitter: String
}

"""
order by aggregate values of table "talk_speakers_view"
"""
input talk_speakers_view_aggregate_order_by {
  avg: talk_speakers_view_avg_order_by
  count: order_by
  max: talk_speakers_view_max_order_by
  min: talk_speakers_view_min_order_by
  stddev: talk_speakers_view_stddev_order_by
  stddev_pop: talk_speakers_view_stddev_pop_order_by
  stddev_samp: talk_speakers_view_stddev_samp_order_by
  sum: talk_speakers_view_sum_order_by
  var_pop: talk_speakers_view_var_pop_order_by
  var_samp: talk_speakers_view_var_samp_order_by
  variance: talk_speakers_view_variance_order_by
}

"""
order by avg() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_avg_order_by {
  id: order_by
  talk_id: order_by
}

"""
Boolean expression to filter rows from the table "talk_speakers_view". All fields are combined with a logical 'AND'.
"""
input talk_speakers_view_bool_exp {
  _and: [talk_speakers_view_bool_exp!]
  _not: talk_speakers_view_bool_exp
  _or: [talk_speakers_view_bool_exp!]
  company: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
  linkedin: String_comparison_exp
  name: String_comparison_exp
  short_bio: String_comparison_exp
  talk_id: Int_comparison_exp
  twitter: String_comparison_exp
}

"""
order by max() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_max_order_by {
  company: order_by
  id: order_by
  image_url: order_by
  linkedin: order_by
  name: order_by
  short_bio: order_by
  talk_id: order_by
  twitter: order_by
}

"""
order by min() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_min_order_by {
  company: order_by
  id: order_by
  image_url: order_by
  linkedin: order_by
  name: order_by
  short_bio: order_by
  talk_id: order_by
  twitter: order_by
}

"""Ordering options when selecting data from "talk_speakers_view"."""
input talk_speakers_view_order_by {
  company: order_by
  id: order_by
  image_url: order_by
  linkedin: order_by
  name: order_by
  short_bio: order_by
  talk_id: order_by
  twitter: order_by
}

"""
select columns of table "talk_speakers_view"
"""
enum talk_speakers_view_select_column {
  """column name"""
  company

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  linkedin

  """column name"""
  name

  """column name"""
  short_bio

  """column name"""
  talk_id

  """column name"""
  twitter
}

"""
order by stddev() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_stddev_order_by {
  id: order_by
  talk_id: order_by
}

"""
order by stddev_pop() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_stddev_pop_order_by {
  id: order_by
  talk_id: order_by
}

"""
order by stddev_samp() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_stddev_samp_order_by {
  id: order_by
  talk_id: order_by
}

"""
order by sum() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_sum_order_by {
  id: order_by
  talk_id: order_by
}

"""
order by var_pop() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_var_pop_order_by {
  id: order_by
  talk_id: order_by
}

"""
order by var_samp() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_var_samp_order_by {
  id: order_by
  talk_id: order_by
}

"""
order by variance() on columns of table "talk_speakers_view"
"""
input talk_speakers_view_variance_order_by {
  id: order_by
  talk_id: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

